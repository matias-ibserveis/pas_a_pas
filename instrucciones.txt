1) npx create-next-app@latest

√ What is your project named? ... pas_a_pas

https://nextjs.org/docs/api-reference/create-next-app


2)  Explicaciones en video:

Enlace a video 3:  
https://drive.google.com/file/d/1r6t435Hni99CVSJt9qJuUeuFdqc3L3U5/view?usp=sharing

Enlace video 4:  
https://drive.google.com/file/d/1zHY9F_wrbPSkwNA3YsMCYzZnG3nMet_U/view?usp=sharing

Enlace video 5:
https://drive.google.com/file/d/1toDVqVFmej4FEPxd1yP-YQwCAWN1EGLX/view?usp=sharing


Error con eslint:  https://stackoverflow.com/questions/68163385/parsing-error-cannot-find-module-next-babel


3) styled-components: 
npm install --save styled-components
https://styled-components.com/docs/basics#installation


4) nprogress:  npm install --save nprogress


 
5) Prisma

  https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb

  npm i prisma
  npm install @prisma/client
  npx prisma init


  añadir en package.json:    "scripts": {
      ...
      "migrate": "prisma migrate dev --name 1online",
      "generate": "prisma generate",
      "studio": "prisma studio"
    },


  CREAR DATABASE en ELEPHANTSQL.  Copiar la dirección de la database


  Next steps:
  1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
  
  2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver or mongodb (Preview).
  
  3. Definir los models (tablas) en el  archivo schema.prisma

  4. npm run generate   to generate the Prisma Client. You can then start querying your database.  
                        primero generate, luego PUSH:  https://github.com/prisma/prisma/issues/4571
  
  5. npx prisma db push


  (Si hubiera ya database ya hecha ->  3. Run   prisma db pull   to turn your database schema into a Prisma schema.)
  

  6. Para abrir la base y poder ver e introducir datos, ejecutar : 
  npm run studio
  (introducir 1 user de prueba y un producto relacionado)




  6) APOLLO GRAPHQL

  APOLLO Client :  npm i @apollo/client
  Nextjs: https://www.apollographql.com/blog/apollo-client/next-js/building-a-next-js-app-with-slash-graphql/ 

  APOLLO SERVER:    npm i apollo-server-micro micro graphql
  https://lyonwj.com/blog/graphql-server-next-js-neo4j-aura-vercel


  SSR : https://blog.codepen.io/2021/09/01/331-next-js-apollo-server-side-rendering-ssr/

  Posibilidad para estudiar (graphql as service):  https://neo4j.com/cloud/aura/
  https://blog.graphqleditor.com/slash-graphql
  https://graphqleditor.com/
  https://dgraph.io/graphql/




  7) AUTH :  npm i next-auth 

  CREAR usuario de pruebas con email REAL ->  npm run studio

  https://medium.com/geekculture/why-and-how-to-get-started-with-next-auth-61740558b45b
  pero....   hay que "ajustarlo" al provider de Google:
  https://next-auth.js.org/getting-started/example

  Y se puede utilizar https://console.cloud.google.com/apis/credentials      para crear ID y Password



  OJO, los datos de google "secretos" estan en  .env.local  y no estan en la repo
  https://stackoverflow.com/questions/55690143/what-is-the-difference-between-env-local-and-env-development-local

  Para Prisma en .env.local: npm i dotenv-cli
  https://stackoverflow.com/questions/70491569/how-to-set-environment-variables-with-prisma-nextjs-and-vercel



8)  ANTES de cambiar schema.prisma -> Borrar datos de productos (npm run studio)

    Actualizar archivo   schema.prisma 
    2º)  npx prisma db push
   
http://localhost:3000/sell -> subir producto  -> comprobar en (npm run studio) que ha entrado producto en BaseDatos




 







